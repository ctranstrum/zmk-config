#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// Define layer names
#define LBASE   0
#define LNAV    1
#define LCODE   2
#define LNUM    3
#define LPUNCT  4
#define LFUNC   5
#define LMACRO  6
#define LADJUST 7
#define LRGB_BT 8

// Keyboard layout
// ->|  W   F   P  [ ]     [ ]  L   U   Y  [ ]
//  A   R   S   T   G       M   N   E   I   O
//  Z   X   C   D   V       K   H   B   J   Q
//             <-x [^]     [_] <-|

// Define key positions
#define KZ 20
#define KQ 29

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&led_strip {
    chain-length = <23>;
};

/ {
    behaviors {
        bt_magic: bluetooth_magic {
            compatible = "zmk,behavior-tap-dance";
            label = "BLUETOOTH_MAGIC";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4>, <&none>, <&bt BT_CLR>;
        };

        rgb_tog: rgb_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "RGB_TOGGLE";
            #binding-cells = <0>;
            bindings = <&ext_power EP_TOG>, <&rgb_ug RGB_TOG>;
        };

        sscw: sticky_shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "STICKY_SHIFT_CAPS_WORD";
            tapping-term-ms = <250>;
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };

        lsscw: layer_sticky_shift_caps_word {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_STICKY_SHIFT_CAPS_WORD";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sscw>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_caps_word {
            layers = <LBASE>;
            timeout-ms = <50>;
            key-positions = <KZ KQ>;
            bindings = <&caps_word>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        func_layer {
            if-layers = <LNAV LNUM>;
            then-layer = <LFUNC>;
        };
        macro_layer {
            if-layers = <LCODE LPUNCT>;
            then-layer = <LMACRO>;
        };
        adjust_layer {
            if-layers = <LNAV LCODE>;
            then-layer = <LADJUST>;
        };
        rgb_bt_layer {
            if-layers = <LNUM LPUNCT>;
            then-layer = <LRGB_BT>;
        };
    };

    macros {
        arrow_fn: arrow_function_macro {
            compatible = "zmk,behavior-macro";
            label = "MACRO_ARROW_FN";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT &kp SPACE &kp LBRC &kp RBRC &kp LEFT>;
        };

        hypr: hyper_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_MOD_HYPER";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LCMD &kp LALT &kp LCTRL &kp LSHFT>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LCMD>;
        };

        meh: meh_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_MOD_MEH";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LALT &kp LCTRL &kp LSHFT>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL &kp LALT>;
        };

        mod_gc: gui_ctrl_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "GUI_CTRL_MOD_MACRO";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LCMD &kp LCTRL>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LCTRL &kp LCMD>;
        };

        mod_gcs: gui_ctrl_shft_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "GUI_CTRL_SHIFT_MOD_MACRO";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LCMD &kp LCTRL &kp LSHFT>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL &kp LCMD>;
        };

        mod_gs: gui_shft_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "GUI_SHIFT_MOD_MACRO";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LCMD &kp LCTRL &kp LSHFT>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL &kp LCMD>;
        };

        scrn_clip: screen_capture_to_clipboard_macro {
            compatible = "zmk,behavior-macro";
            label = "SCREENCAPTURE_CLIPBOARD_MACRO";
            #binding-cells = <0>;
            bindings = <&mod_gcs N4>;
        };

        scrn_file: screen_capture_to_file_macro {
            compatible = "zmk,behavior-macro";
            label = "SCREENCAPTURE_FILE_MACRO";
            #binding-cells = <0>;
            bindings = <&mod_gs N4>;
        };

        scrn_lock: screen_lock_macro {
            compatible = "zmk,behavior-macro";
            label = "SCREEN_LOCK_MACRO";
            #binding-cells = <0>;
            bindings = <&mod_gc Q>;
        };

        tmux: tmux_prefix_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_PREFIX_TMUX";
            #binding-cells = <1>;
            bindings =
                <&macro_tap &kp GRAVE>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "colemak";
            bindings = <
// ====================================================  ========================================================
&kp TAB     &kp W       &kp F      &kp P      &none      &none      &kp L      &kp U      &kp Y       &kp GRAVE
&kp A       &kp R       &kp S      &kp T      &kp G      &kp M      &kp N      &kp E      &kp I       &kp O
&mt LSHFT Z &mt LCTRL X &mt LALT C &mt LCMD D &mt RALT V &mt RALT K &mt LCMD H &mt LALT B &mt LCTRL J &mt LSHFT Q
            &lt LNUM BSPC          &lsscw LNAV 0         &lt LCODE SPACE       &lt LPUNCT RETURN
            >;
        };

        nav_layer {
            label = "nav";
            bindings = <
// ===========================================  ============================================
&none     &none     &none    &none    &none     &none    &none    &kp UP   &none     &none
&none     &none     &none    &none    &none     &kp PGUP &kp LEFT &kp DOWN &kp RIGHT &kp DEL
&kp LSHFT &kp LCTRL &kp LALT &kp LCMD &kp RALT  &kp PGDN &none    &kp DOWN &none     &none
                             &trans   &trans    &lt LCODE TAB     &kp ESC
            >;
        };

        code_layer {
            label = "code";
            bindings = <
// =============================================  ==============================================
&none     &kp GRAVE &kp LPAR &kp RPAR  &none      &none    &none    &none    &none     &none
&kp LT    &kp GT    &kp LBRC &kp RBRC  &kp COLON  &none    &none    &none    &none     &none
&kp CARET &kp TILDE &kp LBKT &kp RBKT  &kp SEMI   &kp RALT &kp LCMD &kp LALT &kp LCTRL &kp LSHFT
                    &kp PIPE &lt LNAV AMPS        &trans   &trans
            >;
        };

        num_layer {
            label = "num";
            bindings = <
// ===========================================  ========================================
&none     &none     &none    &none    &none     &none     &kp N7 &kp N8 &kp N9 &kp EQUAL
&none     &none     &none    &none    &none     &kp SLASH &kp N4 &kp N5 &kp N6 &kp MINUS
&kp LSHFT &kp LCTRL &kp LALT &kp LCMD &kp RALT  &kp STAR  &kp N1 &kp N2 &kp N3 &kp PLUS
                             &trans   &trans    &kp DOT   &lt LPUNCT N0
            >;
        };

        punct_layer {
            label = "punct";
            bindings = <
// ==============================================  ==============================================
&kp STAR  &kp HASH  &kp DLLR  &kp PRCNT &none      &none    &none    &none    &none     &none
&kp EXCL  &kp EQUAL &kp COMMA &kp DQT   &kp MINUS  &none    &none    &none    &none     &none
&kp QMARK &kp AT    &kp DOT   &kp SQT   &kp UNDER  &kp RALT &kp LCMD &kp LALT &kp LCTRL &kp LSHFT
                    &lt LNUM BSLH       &kp FSLH   &trans   &trans
            >;
        };

        func_layer {
            label = "fn";
            bindings = <
// ===========================================  ====================================
&none     &none     &none    &none    &none     &none   &kp F7 &kp F8 &kp F9 &none
&none     &none     &none    &none    &none     &none   &kp F4 &kp F5 &kp F6 &kp F12
&kp LSHFT &kp LCTRL &kp LALT &kp LCMD &kp RALT  &kp F10 &kp F1 &kp F2 &kp F3 &kp F11
                             &trans   &trans    &none   &none
            >;
        };

        macro_layer {
            label = "macro";
            bindings = <
// ==============================================  =================================
&none     &kp LG(X) &kp LG(C) &kp LG(V) &none      &none  &none  &none  &none  &none
&tmux A   &tmux C   &tmux D   &none     &arrow_fn  &none  &none  &none  &none  &none
&kp LC(Z) &kp LC(X) &kp LC(C) &kp LC(D) &kp LC(V)  &none  &none  &none  &none  &none
                              &none     &none      &trans &trans
            >;
        };

        adjust_layer {
            label = "adjust";
            bindings = <
// ===============================================  ============================================================
&none &none   &scrn_file &kp C_VOL_UP &none         &none      &scrn_lock   &none            &hypr N4 &none
&none &none   &scrn_clip &kp C_VOL_DN &kp C_BRI_UP  &none      &none        &none            &none    &none
&none &hypr M &kp CAPS   &kp K_MUTE   &kp C_BRI_DN  &kp C_PREV &kp C_REWIND &kp C_PLAY_PAUSE &kp C_FF &kp C_NEXT
                         &none        &trans        &trans     &none
            >;
        };

        rgb_bt_layer {
            label = "rgb & bt";
            bindings = <
// ============================================================================  =============================================================
&rgb_ug RGB_TOG &none           &none           &none           &none            &none        &none        &out OUT_USB &none        &none
&rgb_ug RGB_EFF &rgb_ug RGB_SPI &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt_magic
&rgb_ug RGB_EFR &rgb_ug RGB_SPD &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD  &none        &none        &out OUT_BLE &none        &none
                                                &trans          &none            &none        &trans
            >;
        };

    };
};
