#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// Define layer names
#define L_CLMAK 0
#define L_QWRTY 1
#define L_NAV   2
#define L_CODE  3
#define L_NUM   4
#define L_PUNCT 5
#define L_FUNC  6
#define L_TMUX  7
#define L_MEDIA 8
#define L_KEYBD 9

// Keyboard layout
//  Q   W   F   P   B       J   L   U   Y   '
//  A   R   S   T   G       M   N   E   I   O
//  Z   X   C   D   V       K   H   ,   .   /
//             bsp sft     spc ret

// Define key positions
#define KQ 0
#define KW 1
#define KF 2
#define KP 3
#define KB 4
#define KJ 5
#define KL 6
#define KU 7
#define KY 8
#define Kquo 9
#define KA 10
#define KR 11
#define KS 12
#define KT 13
#define KG 14
#define KM 15
#define KN 16
#define KE 17
#define KI 18
#define KO 19
#define KZ 20
#define KX 21
#define KC 22
#define KD 23
#define KV 24
#define KK 25
#define KH 26
#define Kcma 27
#define Kdot 28
#define Kslh 29
#define Kbsp 30
#define Ksft 31
#define Kspc 32
#define Kret 33

// Make blank keys more inconspicuous
#define ___ &none

// Shortcuts for punctuation keys
#define ALTcomma &alt_comma LALT 0
#define CTRLdot &ctrl_dot LCTRL 0
#define SHFTslash &shft_slash LSHFT 0

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

&led_strip {
    chain-length = <23>;
};

/ {
    behaviors {
        alt_comma: mod_alt_comma {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_ALT_COMMA";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&mod_comma>;
        };

        bt_magic: bluetooth_magic {
            compatible = "zmk,behavior-tap-dance";
            label = "BLUETOOTH_MAGIC";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4>, <&none>, <&bt BT_CLR>;
        };

        ctrl_dot: mod_ctrl_dot {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_CTRL_DOT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&mod_dot>;
        };

        lsscw: layer_sticky_shift_caps_word {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_STICKY_SHIFT_CAPS_WORD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sscw>;
        };

        mod_comma: mod_comma_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_dot: mod_dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mod_slash: mod_slash_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_SLASH_BACKSLASH";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp BACKSLASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rgb_tog: rgb_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "RGB_TOGGLE";
            #binding-cells = <0>;
            bindings = <&ext_power EP_TOG>, <&rgb_ug RGB_TOG>;
        };

        shft_slash: mod_shft_slash {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_SHIFT_SLASH";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&mod_slash>;
        };

        sscw: sticky_shift_caps_word {
            compatible = "zmk,behavior-mod-morph";
            label = "STICKY_SHIFT_CAPS_WORD";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_caps_word {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <50>;
            key-positions = <KZ Kslh>;
            bindings = <&caps_word>;
        };
        combo_cmd_z {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KQ KA>;
            bindings = <&kp LG(Z)>;
        };
        combo_cmd_x {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KW KR>;
            bindings = <&kp LG(X)>;
        };
        combo_cmd_c {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KF KS>;
            bindings = <&kp LG(C)>;
        };
        combo_cmd_d {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KP KT>;
            bindings = <&kp LG(D)>;
        };
        combo_cmd_v {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KB KG>;
            bindings = <&kp LG(V)>;
        };
        combo_ctrl_z {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KA KZ>;
            bindings = <&kp LC(Z)>;
        };
        combo_ctrl_x {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KR KX>;
            bindings = <&kp LC(X)>;
        };
        combo_ctrl_c {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KS KC>;
            bindings = <&kp LC(C)>;
        };
        combo_ctrl_d {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KT KD>;
            bindings = <&kp LC(D)>;
        };
        combo_ctrl_v {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KG KV>;
            bindings = <&kp LC(V)>;
        };
        combo_ctrl_u {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KU KE>;
            bindings = <&kp LC(U)>;
        };
        combo_alt_dot {
            layers = <L_CLMAK L_QWRTY>;
            timeout-ms = <30>;
            key-positions = <KI Kdot>;
            bindings = <&kp LA(DOT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        func_layer {
            if-layers = <L_NAV L_NUM>;
            then-layer = <L_FUNC>;
        };
        tmux_layer {
            if-layers = <L_CODE L_PUNCT>;
            then-layer = <L_TMUX>;
        };
        media_layer {
            if-layers = <L_NAV L_CODE>;
            then-layer = <L_MEDIA>;
        };
        keyboard_layer {
            if-layers = <L_NUM L_PUNCT>;
            then-layer = <L_KEYBD>;
        };
    };

    macros {
        arrow_fn: arrow_function_macro {
            compatible = "zmk,behavior-macro";
            label = "MACRO_ARROW_FN";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
        };

        hypr: hyper_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_MOD_HYPER";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LCMD &kp LALT &kp LCTRL &kp LSHFT>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LCMD>;
        };

        meh: meh_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_MOD_MEH";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LALT &kp LCTRL &kp LSHFT>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL &kp LALT>;
        };

        mod_gc: gui_ctrl_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "GUI_CTRL_MOD_MACRO";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LCMD &kp LCTRL>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LCTRL &kp LCMD>;
        };

        mod_gcs: gui_ctrl_shft_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "GUI_CTRL_SHIFT_MOD_MACRO";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LCMD &kp LCTRL &kp LSHFT>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL &kp LCMD>;
        };

        mod_gs: gui_shft_mod_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "GUI_SHIFT_MOD_MACRO";
            #binding-cells = <1>;
            bindings =
                <&macro_press &kp LCMD &kp LSHFT>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCMD>;
        };

        scrn_clip: screen_capture_to_clipboard_macro {
            compatible = "zmk,behavior-macro";
            label = "SCREENCAPTURE_CLIPBOARD_MACRO";
            #binding-cells = <0>;
            bindings = <&mod_gcs N4>;
        };

        scrn_file: screen_capture_to_file_macro {
            compatible = "zmk,behavior-macro";
            label = "SCREENCAPTURE_FILE_MACRO";
            #binding-cells = <0>;
            bindings = <&mod_gs N4>;
        };

        scrn_lock: screen_lock_macro {
            compatible = "zmk,behavior-macro";
            label = "SCREEN_LOCK_MACRO";
            #binding-cells = <0>;
            bindings = <&mod_gc Q>;
        };

        tmux: tmux_prefix_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_PREFIX_TMUX";
            #binding-cells = <1>;
            bindings =
                <&macro_tap &kp LC(B)>,
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>;
        };

        vtab: vim_tab_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "MACRO_VIM_TAB";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
                <&macro_tap &kp G &kp T>;
        };

        vtabnxt: vim_tab_next_macro {
            compatible = "zmk,behavior-macro";
            label = "MACRO_VIM_TAB_NEXT";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp G &kp T>;
        };

        vtabprv: vim_tab_prv_macro {
            compatible = "zmk,behavior-macro";
            label = "MACRO_VIM_TAB_PREV";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp G &kp LS(T)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak_layer {
            label = "colemak";
            bindings = <
// =====================================================  ================================================
&kp Q       &kp W       &kp F      &kp P      &kp B       &kp J      &kp L      &kp U    &kp Y   &kp SQT
&kp A       &kp R       &kp S      &kp T      &kp G       &kp M      &kp N      &kp E    &kp I   &kp O
&mt LSHFT Z &mt LCTRL X &mt LALT C &mt LCMD D &mt RALT V  &mt RALT K &mt LCMD H ALTcomma CTRLdot SHFTslash
            &lt L_NUM BSPC         &lsscw L_NAV 0         &lt L_CODE SPACE      &lt L_PUNCT RETURN
            >;
        };

        qwerty_layer {
            label = "qwerty";
            bindings = <
// =====================================================  =================================================================
&kp Q       &kp W       &kp E      &kp R      &kp T       &kp Y      &kp U      &kp I    &kp O   &kp P
&kp A       &kp S       &kp D      &kp F      &kp G       &kp H      &kp J      &kp K    &kp L   &kp SQT
&mt LSHFT Z &mt LCTRL X &mt LALT C &mt LCMD V &mt RALT B  &mt RALT N &mt LCMD M ALTcomma CTRLdot SHFTslash
            &lt L_NUM BSPC         &lsscw L_NAV 0         &lt L_CODE SPACE      &lt L_PUNCT RETURN
            >;
        };

        nav_layer {
            label = "nav";
            bindings = <
// ===========================================  =============================================
___       ___       ___      ___      ___       &kp SPC  &kp RET  &kp UP   &kp BSPC  &kp DEL
___       ___       ___      ___      ___       &kp PGUP &kp LEFT &kp DOWN &kp RIGHT &kp HOME
&kp LSHFT &kp LCTRL &kp LALT &kp LCMD &kp RALT  &kp PGDN &vtabprv &tmux N  &vtabnxt  &kp END
                             &trans   &trans    &lt L_CODE TAB    &kp ESC
            >;
        };

        code_layer {
            label = "code";
            bindings = <
// =============================================  ==============================================
&arrow_fn &kp GRAVE &kp LPAR &kp RPAR  &kp PLUS   ___      ___      ___      ___       ___
&kp LT    &kp GT    &kp LBRC &kp RBRC  &kp MINUS  ___      ___      ___      ___       ___
&kp CARET &kp TILDE &kp LBKT &kp RBKT  &kp UNDER  &kp RALT &kp LCMD &kp LALT &kp LCTRL &kp LSHFT
                    &kp BSLH &lt L_NAV FSLH       &trans   &trans
            >;
        };

        num_layer {
            label = "num";
            bindings = <
// ===========================================  ========================================
___       ___       ___      ___      ___       &kp COLON &kp N7 &kp N8 &kp N9 &kp EQUAL
___       ___       ___      ___      ___       &kp SLASH &kp N4 &kp N5 &kp N6 &kp MINUS
&kp LSHFT &kp LCTRL &kp LALT &kp LCMD &kp RALT  &kp STAR  &kp N1 &kp N2 &kp N3 &kp PLUS
                             &trans   &trans    &kp DOT   &lt L_PUNCT N0
            >;
        };

        punct_layer {
            label = "punct";
            bindings = <
// ==============================================  ==============================================
&kp STAR  &kp HASH  &kp DLLR  &kp PRCNT &kp MINUS  ___      ___      ___      ___       ___
&kp EXCL  &kp EQUAL &kp DOT   &kp SQT   &kp COLON  ___      ___      ___      ___       ___
&kp QMARK &kp AT    &kp COMMA &kp DQT   &kp SEMI   &kp RALT &kp LCMD &kp LALT &kp LCTRL &kp LSHFT
                    &lt L_NUM PIPE      &kp AMPS   &trans   &trans
            >;
        };

        func_layer {
            label = "fn";
            bindings = <
// ===========================================  ======================================
___       ___       ___      ___      ___       ___       &kp F7 &kp F8 &kp F9 ___
___       ___       ___      ___      ___       &arrow_fn &kp F4 &kp F5 &kp F6 &kp F12
&kp LSHFT &kp LCTRL &kp LALT &kp LCMD &kp RALT  ___       &kp F1 &kp F2 &kp F3 &kp F11
                             &trans   &trans    ___       &kp F10
            >;
        };

        tmux_layer {
            label = "tmux";
            bindings = <
// =========================================  =================================
&tmux N  &tmux C  &tmux A  &tmux D  &tmux N   ___    ___    ___    ___    ___
&vtab N1 &vtab N2 &vtab N3 &vtab N4 &vtab N5  ___    ___    ___    ___    ___
&tmux N1 &tmux N2 &tmux N3 &tmux N4 &tmux N5  ___    ___    ___    ___    ___
                           &vtabprv &vtabnxt  &trans &trans
            >;
        };

        media_layer {
            label = "media";
            bindings = <
// ===============================================  ============================================================
___   ___     &scrn_file &kp C_VOL_UP ___           ___        &scrn_lock   ___              &hypr N4 ___
___   ___     &scrn_clip &kp C_VOL_DN &kp C_BRI_UP  ___        ___          ___              ___      ___
___   &hypr M &kp CAPS   &kp K_MUTE   &kp C_BRI_DN  &kp C_PREV &kp C_REWIND &kp C_PLAY_PAUSE &kp C_FF &kp C_NEXT
                         ___          &trans        &trans     ___
            >;
        };

        keyboard_layer {
            label = "keyboard";
            bindings = <
// ============================================================================  =============================================================
___             &rgb_ug RGB_TOG &rgb_ug RGB_TOG &to L_QWRTY     ___              ___          &to L_CLMAK  &out OUT_USB ___          ___
&rgb_ug RGB_EFF &rgb_ug RGB_SPI &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt_magic
&rgb_ug RGB_EFR &rgb_ug RGB_SPD &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD  ___          ___          &out OUT_BLE ___          ___
                                                &trans          ___              ___          &trans
            >;
        };

    };
};
