#include <behaviors.dtsi>
#include <dt-bindings/zmk/animation.h>
#include <dt-bindings/zmk/animation_compose.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

// Define layer names
#define LBASE   0
#define LLOWER  1
#define LRAISE  2
#define LADJUST 3
#define LSYMBOL 4
#define LMACRO  5

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&led_strip {
    chain-length = <23>;
};

/ {
    behaviors {
        bt_magic: bluetooth_magic {
            compatible = "zmk,behavior-tap-dance";
            label = "BLUETOOTH_MAGIC";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&bt BT_SEL 4>, <&none>, <&bt BT_CLR>;
        };

        rgb_tog: rgb_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "RGB_TOGGLE";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&ext_power EP_TOG>, <&rgb_ug RGB_TOG>;
        };
    };

    ZMK_MACRO(arrow_fn, bindings = <&kp EQUAL &kp GT &kp SPACE &kp LBRC &kp RBRC &kp LEFT>;)

    // MacOS shortcuts (need to match what is listed in Keyboard Shortcuts settings)
    ZMK_MACRO(launchpad, bindings = <&kp LG(LC(LS(N4)))>;)
    ZMK_MACRO(mic_mute, bindings = <&kp LG(LA(LC(LS(M))))>;)
    ZMK_MACRO(scrn_clip, bindings = <&kp LG(LC(LS(N4)))>;)
    ZMK_MACRO(scrn_file, bindings = <&kp LG(LS(N4))>;)
    ZMK_MACRO(scrn_lock, bindings = <&kp LG(LC(Q))>;)

    // tmux convenience macros
    ZMK_MACRO(tmux_name, bindings = <&kp GRAVE &kp A>;)
    ZMK_MACRO(tmux_new, bindings = <&kp GRAVE &kp C>;)
    ZMK_MACRO(tmux_end, bindings = <&kp GRAVE &kp D>;)

    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <LLOWER LRAISE>;
            then-layer = <LADJUST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
// =========================================================  ========================================================
&kp ESC     &kp W       &kp F      &kp P      &none           &none      &kp L      &kp U      &kp Y       &kp GRAVE
&kp A       &kp R       &kp S      &kp T      &kp G           &kp M      &kp N      &kp E      &kp I       &kp O
&mt LSHFT Z &mt LCTRL X &mt LALT C &mt LCMD D &mt RALT V      &mt LALT K &mt RCMD H &mt RALT B &mt RCTRL J &mt RSHFT Q
                        &lt LSYMBOL BSPC      &lt LLOWER TAB  &lt LRAISE SPACE      &lt LMACRO RETURN
            >;
        };

        lower_layer {
            bindings = <
// ====================================================================  ================================================================
&none          &none         &kp LPAR      &kp RPAR       &none          &none        &kp N7      &kp N8      &kp N9       &animation ANIMATION_TOGGLE(0)
&kp LT         &kp GT        &kp EXCL      &kp EQUAL      &kp COLON      &kp COMMA    &kp N4      &kp N5      &kp N6       &kp MINUS
&mt LSHFT BSPC &mt LCTRL RET &mt LALT STAR &mt LCMD SLASH &mt RALT SEMI  &mt LALT DOT &mt RCMD N1 &mt RALT N2 &mt RCTRL N3 &mt RSHFT PLUS
                                           &kp DELETE     &trans         &trans       &kp N0
            >;
        };

        raise_layer {
            bindings = <
// ======================================================================  =========================================================================
&none           &kp GRAVE       &kp LPAR      &kp RPAR      &none          &none          &kp BACKSLASH &kp UP         &kp DQT       &none
&kp LT          &kp GT          &kp LBRC      &kp RBRC      &kp COLON      &kp MINUS      &kp LEFT      &kp DOWN       &kp RIGHT     &kp APOSTROPHE
&mt LSHFT QMARK &mt LCTRL TILDE &mt LALT LBKT &mt LCMD RBKT &mt RALT SEMI  &mt LALT UNDER &mt RCMD PIPE &mt RALT COMMA &mt RCTRL DOT &mt RSHFT SLASH
                                              &kp ESC       &trans         &trans         &mo BKSP
        >;
        };

        adjust_layer {
            bindings = <
// ============================================================  ==================================================================
&none        &caps_word &none      &kp K_MUTE   &none            &none        &scrn_lock   &none            &launchpad   &rgb_tog
&kp C_BRI_UP &scrn_file &scrn_clip &kp C_VOL_DN &rgb_ug RGB_BRI  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2     &bt BT_SEL 3 &bt_magic
&kp C_BRI_DN &mic_mute  &kp CAPS   &kp C_VOL_UP &rgb_ug RGB_BRD  &kp C_PREV   &kp C_REWIND &kp C_PLAY_PAUSE &kp C_FF     &kp C_NEXT
                                   &kp ESC      &trans           &trans       &kp DELETE
            >;
        };

        symbol_layer {
            bindings = <
// =========================================================================  ======================================================================
&none           &none           &kp LPAR       &kp RPAR       &none           &none          &kp AMPS      &kp STAR    &kp SLASH      &none
&none           &none           &none          &kp LC(TAB)    &kp LG(GRAVE)   &kp BACKSLASH  &kp DOLLAR    &kp PERCENT &kp CARET      &kp MINUS
&mt LSHFT LG(Z) &mt LCTRL LG(X) &mt LALT LG(C) &mt LCMD LG(D) &mt RALT LG(V)  &mt LALT EQUAL &mt RCMD EXCL &mt RALT AT &mt RCTRL HASH &mt RSHFT PLUS
                                               &trans         &none           &none          &trans
            >;
        };

        macro_layer {
            bindings = <
// =========================================================================  ======================================
&none           &none           &none          &none          &none           &none     &kp F7 &kp F8 &kp F9 &none
&tmux_name      &tmux_new       &tmux_end      &none          &none           &arrow_fn &kp F4 &kp F5 &kp F6 &kp F12
&mt LSHFT LC(Z) &mt LCTRL LC(X) &mt LALT LC(C) &mt LCMD LC(D) &mt RALT LC(V)  &kp F10   &kp F1 &kp F2 &kp F3 &kp F11
                                               &kp DEL        &none           &none     &trans
            >;
        };

    };

    animation {
        compatible = "zmk,animation";
        drivers = <&led_strip>;
        animations = <&rgb_red &rgb_white &rgb_yellow &rgb_blue>;
        pixels =
            // 0: RGB underglow back of left board
            <&rgb_red 62 21>, <&rgb_red 47 3>, <&rgb_red 10 18>, <&rgb_red 10 43>, <&rgb_red 37 52>, <&rgb_red 74 61>,
            // 6: per-key lighting on left board, top row
            <&rgb_yellow 0 18>, <&rgb_white 18 6>, <&rgb_white 37 0>, <&rgb_white 51 4>, <&rgb_white 74 6>,
            // 11: row 2
            <&rgb_white 0 37>, <&rgb_white 18 25>, <&rgb_white 37 18>, <&rgb_white 51 22>, <&rgb_white 74 24>,
            // 16: row 3
            <&rgb_white 0 55>, <&rgb_white 18 43>, <&rgb_white 37 37>, <&rgb_white 51 41>, <&rgb_white 74 43>,
            // 21: thumb keys
            <&rgb_blue 65 65>, <&rgb_blue 85 72>,

            // 23: RGB underglow back of right board
            <&rgb_red 123 21>, <&rgb_red 138 3>, <&rgb_red 175 18>, <&rgb_red 175 43>, <&rgb_red 148 52>, <&rgb_red 111 61>,
            // 29: per-key lighting on right board, top row, right-to-left
            <&rgb_yellow 185 18>, <&rgb_white 167 6>, <&rgb_white 148 0>, <&rgb_white 134 4>, <&rgb_white 111 6>,
            // 34: row 2, right-to-left
            <&rgb_white 185 37>, <&rgb_white 167 25>, <&rgb_white 148 18>, <&rgb_white 134 22>, <&rgb_white 111 24>,
            // 39: row 3, right-to-left
            <&rgb_white 185 55>, <&rgb_white 167 43>, <&rgb_white 148 37>, <&rgb_white 134 41>, <&rgb_white 111 43>,
            // 44: thumb keys, right-to-left
            <&rgb_blue 120 65>, <&rgb_blue 100 72>;
    };

    rgb_red: rgb_red {
        compatible = "zmk,animation-solid";
        status = "okay";
        label = "rgb_red";
        #pixel-cells = <2>;
        colors = <HSL(0, 100, 50)>;
    };

    rgb_white: rgb_white {
        compatible = "zmk,animation-solid";
        status = "okay";
        label = "rgb_white";
        #pixel-cells = <2>;
        colors = <HSL(0, 0, 100)>;
    };

    rgb_yellow: rgb_yellow {
        compatible = "zmk,animation-solid";
        status = "okay";
        label = "rgb_red";
        #pixel-cells = <2>;
        colors = <HSL(53, 100, 100)>;
    };

    rgb_blue: rgb_blue {
        compatible = "zmk,animation-solid";
        status = "okay";
        label = "rgb_red";
        #pixel-cells = <2>;
        colors = <HSL(222, 100, 100)>;
    };
};
